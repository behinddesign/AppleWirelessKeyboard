//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppleWirelessKeyboard.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.4.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool FMode {
            get {
                return ((bool)(this["FMode"]));
            }
            set {
                this["FMode"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool FnEnabled {
            get {
                return ((bool)(this["FnEnabled"]));
            }
            set {
                this["FnEnabled"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool SwapCtrlFn {
            get {
                return ((bool)(this["SwapCtrlFn"]));
            }
            set {
                this["SwapCtrlFn"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string Hash {
            get {
                return ((string)(this["Hash"]));
            }
            set {
                this["Hash"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool EnableOverlay {
            get {
                return ((bool)(this["EnableOverlay"]));
            }
            set {
                this["EnableOverlay"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool CheckForUpdates {
            get {
                return ((bool)(this["CheckForUpdates"]));
            }
            set {
                this["CheckForUpdates"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("en")]
        public string Language {
            get {
                return ((string)(this["Language"]));
            }
            set {
                this["Language"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool StartupShortcut {
            get {
                return ((bool)(this["StartupShortcut"]));
            }
            set {
                this["StartupShortcut"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool FnOnAtStart {
            get {
                return ((bool)(this["FnOnAtStart"]));
            }
            set {
                this["FnOnAtStart"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfKeyBinding xmlns:xsd=\"http://www" +
            ".w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n" +
            "  <KeyBinding>\r\n    <Key>F10</Key>\r\n    <Module>VolumeMute</Module>\r\n    <Ctrl>f" +
            "alse</Ctrl>\r\n    <Alt>false</Alt>\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>\r\n   " +
            " <Shift>false</Shift>\r\n    <FMode>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBinding>" +
            "\r\n    <Key>Back</Key>\r\n    <Module>Delete</Module>\r\n    <Ctrl>false</Ctrl>\r\n    " +
            "<Alt>false</Alt>\r\n    <Fn>true</Fn>\r\n    <Win>false</Win>\r\n    <Shift>false</Shi" +
            "ft>\r\n    <FMode>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBinding>\r\n    <Key>F1</Key" +
            ">\r\n    <Module>IncreaseBrightness</Module>\r\n    <Ctrl>false</Ctrl>\r\n    <Alt>fal" +
            "se</Alt>\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>\r\n    <Shift>false</Shift>\r\n  " +
            "  <FMode>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBinding>\r\n    <Key>F2</Key>\r\n    " +
            "<Module>DecreaseBrightness</Module>\r\n    <Ctrl>false</Ctrl>\r\n    <Alt>false</Alt" +
            ">\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>\r\n    <Shift>false</Shift>\r\n    <FMod" +
            "e>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBinding>\r\n    <Key>F7</Key>\r\n    <Module" +
            ">PreviousTrack</Module>\r\n    <Ctrl>false</Ctrl>\r\n    <Alt>false</Alt>\r\n    <Fn>f" +
            "alse</Fn>\r\n    <Win>false</Win>\r\n    <Shift>false</Shift>\r\n    <FMode>false</FMo" +
            "de>\r\n  </KeyBinding>\r\n  <KeyBinding>\r\n    <Key>F8</Key>\r\n    <Module>PauseTrack<" +
            "/Module>\r\n    <Ctrl>false</Ctrl>\r\n    <Alt>false</Alt>\r\n    <Fn>false</Fn>\r\n    " +
            "<Win>false</Win>\r\n    <Shift>false</Shift>\r\n    <FMode>false</FMode>\r\n  </KeyBin" +
            "ding>\r\n  <KeyBinding>\r\n    <Key>F9</Key>\r\n    <Module>NextTrack</Module>\r\n    <C" +
            "trl>false</Ctrl>\r\n    <Alt>false</Alt>\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>" +
            "\r\n    <Shift>false</Shift>\r\n    <FMode>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBin" +
            "ding>\r\n    <Key>F11</Key>\r\n    <Module>VolumeDecrease</Module>\r\n    <Ctrl>false<" +
            "/Ctrl>\r\n    <Alt>false</Alt>\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>\r\n    <Shi" +
            "ft>false</Shift>\r\n    <FMode>false</FMode>\r\n  </KeyBinding>\r\n  <KeyBinding>\r\n   " +
            " <Key>F12</Key>\r\n    <Module>VolumeIncrease</Module>\r\n    <Ctrl>false</Ctrl>\r\n  " +
            "  <Alt>false</Alt>\r\n    <Fn>false</Fn>\r\n    <Win>false</Win>\r\n    <Shift>false</" +
            "Shift>\r\n    <FMode>false</FMode>\r\n  </KeyBinding>\r\n</ArrayOfKeyBinding>")]
        public string Profile {
            get {
                return ((string)(this["Profile"]));
            }
            set {
                this["Profile"] = value;
            }
        }
    }
}
